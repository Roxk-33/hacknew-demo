{"version":3,"sources":["components/ArticleDetail/index.jsx","components/UserReviewList/index.jsx","components/UserReviewInput/index.jsx","pages/ReviewList.jsx","pages/Relpy.jsx","App.js","serviceWorker.js","index.js"],"names":["ArticleDetailStyle","styled","h1","ArticleDetailTitleStyle","a","ArticleDetail","title","link","href","UserReviewListStyle","UserReviewItemStyle","div","UserReviewItemShowBtnStyle","span","UserReviewItemChildStyle","props","isShow","changeChildReviewShow","state","idx","newState","UserReviewListDetail","reviewListData","useReducer","Array","length","fill","isShowList","dispathIsShow","map","reviewData","hasChildReview","list","key","text","onClick","className","to","UserReviewList","UserReviewInputStyle","UserReviewInputTextareaStyle","textarea","UserReviewInputSumbitBtnStyle","button","UserReviewInput","isListPage","useState","reviewContent","setReviewContent","value","rows","cols","onChange","e","target","alert","fetcher","url","fetch","then","r","json","Container","ReviewList","id","urlParse","parse","window","location","search","useSWR","data","error","console","log","Relpy","App","path","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.2373c1ce.chunk.js","sourcesContent":["import React from 'react';\r\nimport styled from 'styled-components';\r\n\r\nconst ArticleDetailStyle = styled.h1`\r\n  font-size: 1.5em;\r\n  color: palevioletred;\r\n  color: #828282;\r\n`;\r\nconst ArticleDetailTitleStyle = styled.a`\r\n`;\r\n\r\nexport default function ArticleDetail({ title, link }) {\r\n    return <ArticleDetailStyle>\r\n        <ArticleDetailTitleStyle href={link}>\r\n            {title}\r\n        </ArticleDetailTitleStyle>\r\n    </ArticleDetailStyle>\r\n}","import React, { useState, useReducer } from 'react';\r\nimport styled from 'styled-components';\r\nimport { Link } from \"react-router-dom\";\r\nconst UserReviewListStyle = styled.h1`\r\n  margin-top: 30px;\r\n`;\r\n\r\nconst UserReviewItemStyle = styled.div`\r\n    margin-top: 20px;\r\n    display: block;\r\n    font-size: 9pt;\r\n    .relpy-link {\r\n        display: block;\r\n    }\r\n`;\r\n\r\nconst UserReviewItemShowBtnStyle = styled.span`\r\n    cursor: pointer;\r\n    margin-left: 5px;\r\n    font-size: 10pt;\r\n    &:hover {\r\n        text-decoration: underline;\r\n    }\r\n`;\r\n\r\nconst UserReviewItemChildStyle = styled.div`\r\n    margin-left: 20px;\r\n    display: ${props => props.isShow ? 'block' : 'none'}\r\n`;\r\n\r\nfunction changeChildReviewShow(state,idx){\r\n    const newState = [...state];\r\n    newState[idx] = !newState[idx];\r\n    return newState;\r\n}\r\n\r\n// 同一层级的评论列表\r\nfunction UserReviewListDetail({ reviewListData }) {\r\n    const [isShowList, dispathIsShow] = useReducer(changeChildReviewShow, Array(reviewListData.length || 0).fill(true));\r\n\r\n    return <>\r\n        {\r\n            reviewListData.map((reviewData, idx) => {\r\n                const hasChildReview = reviewData.list && reviewData.list.length > 0;\r\n                return <UserReviewItemStyle key={reviewData.text + idx}>\r\n                <div>\r\n                    {reviewData.text}\r\n                    {hasChildReview ? <UserReviewItemShowBtnStyle onClick={()=>dispathIsShow(idx)}>{isShowList[idx] ? '[-]' : `${reviewData.list.length} more`}</UserReviewItemShowBtnStyle> : null}\r\n                    <Link className=\"relpy-link\" to='/relpy'>relpy</Link>\r\n                </div>\r\n                {hasChildReview ? <UserReviewItemChildStyle isShow={isShowList[idx]}><UserReviewListDetail reviewListData={reviewData.list} />  </UserReviewItemChildStyle> : null}\r\n            </UserReviewItemStyle>\r\n            })\r\n        }\r\n    </>\r\n}\r\n\r\n\r\nexport default function UserReviewList() {\r\n    const data = [\r\n        {\r\n            text: `The first clue that you're going to have water problems are the steps leading down to your front door. You built a catch basin to live in.\r\n            Second clue is it is made from concrete. Concrete by itself is not water tight. It can be made water tight but some significant effort is required. Just ask anyone who has ever built a basement`,\r\n            list: [\r\n                {\r\n                    text: `Wooden houses are a mistake. They burn. Unless... Unless you're good at making wooden houses that aren't likely to burn.\r\n                    A failure isn't generally a proof that the main idea is wrong. Most failure are execution failures. I imagine that if they built this house again, they'de solve those problems`,\r\n                    list: [\r\n                        {\r\n                            text: `One of the cons of underground living the article doesn't go into is radon exposure. Depending on where your house is located this can be a significant health risk`\r\n                        },\r\n\r\n                    ]\r\n                },\r\n                {\r\n                    text: 'There is a whole city in Australia that has almost exclusively underground houses. Seach for \"Coober Pedy\" on youtube for one of the many documentaries about that city',\r\n                },\r\n            ]\r\n        },\r\n        {\r\n            text: `Damn, this is a shame but at least they are honest with themselves and can look at this with an objective lens. Personally the idea of an underground house just screams problems to me, but I wonder if that's misplaced and there are people with well constructed underground homes that they've remained happy with long term.`\r\n        },\r\n        {\r\n            text:`\r\n            philprx 10 minutes ago [–]\r\n\r\n            Point 10. Cancer\r\n            “We replaced all damaged wood with treated timber and soaked it in creosote for good measure.”\r\n\r\n            Please, don’t do that. It’s a high suspect for cancer. Already some paints and most of the wood agglomerate glues are bad for health, but this!\r\n\r\n            Good luck still with your house, it’s vital to have a livable place for balance and creativity.`\r\n        }\r\n    ]\r\n\r\n    return <UserReviewListStyle>\r\n        <UserReviewListDetail reviewListData={data} />\r\n    </UserReviewListStyle>\r\n};","import React, { useState } from 'react';\r\nimport styled from 'styled-components';\r\n\r\nconst UserReviewInputStyle = styled.h1`\r\n  font-size: 1.5em;\r\n  color: palevioletred;\r\n  color: #828282;\r\n`;\r\nconst UserReviewInputTextareaStyle = styled.textarea`\r\n    font-family: monospace;\r\n`;\r\nconst UserReviewInputSumbitBtnStyle = styled.button`\r\n    margin-top: 20px;\r\n    display: block;\r\n`;\r\n\r\n// isListPage 是否是评论列表页内调用输入框\r\nexport default function UserReviewInput({ isListPage = true }) {\r\n\r\n    const [reviewContent, setReviewContent] = useState('');\r\n\r\n    function handleReview(e) {\r\n        setReviewContent(e.target.value);\r\n    }\r\n\r\n    function handleSumbitReview() {\r\n        alert(`提交review:${reviewContent}`);\r\n    }\r\n\r\n    return <UserReviewInputStyle>\r\n        <UserReviewInputTextareaStyle value={reviewContent} rows=\"6\" cols=\"60\" onChange={handleReview} />\r\n        <UserReviewInputSumbitBtnStyle onClick={handleSumbitReview}>{isListPage ? 'add comment' : 'reply'}</UserReviewInputSumbitBtnStyle>\r\n    </UserReviewInputStyle>\r\n}","import React from 'react';\r\nimport useSWR from 'swr';\r\nimport urlParse from 'query-string';\r\nimport styled from 'styled-components';\r\nimport ArticleDetail from '../components/ArticleDetail';\r\nimport UserReviewList from '../components/UserReviewList';\r\nimport UserReviewInput from '../components/UserReviewInput';\r\nconst fetcher = url => fetch(url).then(r => r.json())\r\n\r\nconst Container = styled.div`\r\n    padding: 5px 20px;\r\n    max-width:90%;\r\n    margin: 20px auto;\r\n    color: #828282;\r\n    font-size: 10pt;\r\n    text-align: left;\r\n    background-color: rgb(246, 246, 239);\r\n`;\r\n\r\nfunction ReviewList() {\r\n    const { id } = urlParse.parse(window.location.search);\r\n    const { data, error } = useSWR(`https://hacker-news.firebaseio.com/v0/item/${id}.json?print=pretty`, fetcher);\r\n    console.log(data);\r\n    if (!id) return <div>\r\n        无 ID 参数\r\n    </div>\r\n    if (!data) return <div>loading...</div>\r\n    return (\r\n        <Container className=\"ReviewList\">\r\n            <ArticleDetail title={data.title} link={data.url} />\r\n            <UserReviewInput />\r\n            <UserReviewList />\r\n        </Container>\r\n    );\r\n}\r\n\r\nexport default ReviewList;\r\n","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport ArticleDetail from '../components/ArticleDetail';\r\nimport UserReviewInput from '../components/UserReviewInput';\r\nconst Container = styled.div`\r\n    padding: 5px 20px;\r\n    max-width:90%;\r\n    margin: 20px auto;\r\n    color: #828282;\r\n    font-size: 10pt;\r\n    text-align: left;\r\n    background-color: rgb(246, 246, 239);\r\n`;\r\n\r\nexport default function Relpy() {\r\n    const data = {\r\n        title: `\r\n        This is a lesson in being innovative. Pushing boundaries has costs. You can explore new ideas, rid yourself of legacy assumptions and arrive at some valuable things. But, you forgo the (often hidden) benefits of past mistakes and standard techniques that have all the kinks ironed out.`,\r\n    }\r\n    return (\r\n        <Container className=\"ReviewList\">\r\n            <ArticleDetail title={data.title} />\r\n            <UserReviewInput isListPage={false}/>\r\n        </Container>\r\n    );\r\n}","import React from 'react';\nimport {\n    BrowserRouter as Router,\n    Switch,\n    Route,\n} from \"react-router-dom\";\nimport ReviewList from './pages/ReviewList';\nimport Relpy from './pages/Relpy';\n\n\nfunction App() {\n    return (\n        <Router>\n            <div>\n                {/* A <Switch> looks through its children <Route>s and\n            renders the first one that matches the current URL. */}\n                <Switch>\n                    <Route path=\"/relpy\">\n                        <Relpy />\n                    </Route>\n                    <Route path=\"/\">\n                        <ReviewList />\n                    </Route>\n                </Switch>\n            </div>\n        </Router>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}